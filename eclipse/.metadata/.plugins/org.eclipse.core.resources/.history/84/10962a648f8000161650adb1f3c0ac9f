package com.derf.btawc.blocks.tileentity;

import java.util.List;

import com.derf.btawc.energy.EnergyStorage;
import com.derf.btawc.util.BlockPos;
import com.derf.btawc.util.Holder;
import com.derf.btawc.util.WorldUtils;

import cofh.api.energy.IEnergyProvider;
import cofh.api.energy.IEnergyReceiver;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.ForgeDirection;

public class TileEntityCreativeGenerator extends TileEntityBasic implements IEnergyProvider {

	private EnergyStorage storage = new EnergyStorage(1000000, 100000);
	
	@Override
	public void updateEntity() {
		// TODO Auto-generated method stub
		super.updateEntity();
		// Update Generator per tick
		updateGeneratorInternalStorage();
		// Update TileEntities with the internal storage
		updateTileEntities();
	}

	private void updateTileEntities() {
		BlockPos pos = new BlockPos(this.xCoord, this.yCoord, this.zCoord);
		List<Holder> sides = Holder.getHolders(pos);
		for(Holder side : sides) {
			TileEntity tile = WorldUtils.getTileEntity(worldObj, pos);
			if(tile != null && tile instanceof IEnergyReceiver) {
				IEnergyReceiver handler = (IEnergyReceiver)tile;
				int ee = this.extractEnergy(side.getDirection(), storage.getMaxExtract(), true);
				int er = handler.receiveEnergy(side.getDirection().getOpposite(), ee, true);
				this.extractEnergy(side.getDirection(), er, false);
				handler.receiveEnergy(side.getDirection().getOpposite(), er, false);
			}
		}
	}

	private void updateGeneratorInternalStorage() {
		int delta = storage.receiveEnergy(storage.getMaxReceive(), true);
		this.storage.receiveEnergy(delta, false);
	}

	@Override
	public boolean canConnectEnergy(ForgeDirection from) {
		return true;
	}

	@Override
	public int extractEnergy(ForgeDirection from, int maxExtract, boolean simulate) {
		return storage.extractEnergy(maxExtract, simulate);
	}

	@Override
	public int getEnergyStored(ForgeDirection from) {
		return storage.getEnergyStored();
	}

	@Override
	public int getMaxEnergyStored(ForgeDirection from) {
		return storage.getMaxEnergyStored();
	}

	@Override
	public void readFromNBT(NBTTagCompound tag) {
		super.readFromNBT(tag);
		storage.readFromNBT(tag);
	}

	@Override
	public void writeToNBT(NBTTagCompound tag) {
		super.writeToNBT(tag);
		storage.writeToNBT(tag);
	}

	public void printEnergyValue(EntityPlayer player) {
		String s = String.format("Energy Level: [%i/%i]", this.getEnergyStored(ForgeDirection.UNKNOWN), this.getMaxEnergyStored(ForgeDirection.UNKNOWN));
		player.addChatMessage(new ChatComponentText(s));
	}
}
