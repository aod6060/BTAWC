package com.derf.btawc.blocks.inventory.container;

import com.derf.btawc.blocks.tileentity.TileEntitySuperFurnace;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.ICrafting;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;

public class ContainerSuperFurnace extends ContainerBasic {
	
	private TileEntitySuperFurnace superFurnace;
	private int lastCookTime;
	private int lastBurnTime;
	privaet int lastItemBurnTime;
	
	public ContainerSuperFurnace(InventoryPlayer player, TileEntitySuperFurnace superFurnace) {
		
		// Create Input Slots for Super Furnace
		for(int y = 0; y < 3; y++) {
			for(int x = 0; x < 3; x++) {
				this.addSlotToContainer(new Slot(superFurnace, y * 3 + x, x * 18 + 8, y * 18 + 8));
			}
		}
		// Create Output Slots for Super Furnace
		for(int y = 0; y < 3; y++) {
			for(int x = 0; x < 3; x++) {
				this.addSlotToContainer(new Slot(superFurnace, (y*3+x)+9, x * 18 + 114, y * 18 + 8) {
					@Override
					public boolean isItemValid(ItemStack p_75214_1_) {
						return false;
					}
					
				});
			}
		}
		// Create Fuel Slot for Super Furnace
		this.addSlotToContainer(new Slot(superFurnace, 18, 8, 88));
		// Create Player Inventory
		// Create Player Inventory slots 9 - 35
		for(int y = 0; y < 3; y++) {
			for(int x = 0; x < 9; x++) {
				this.addSlotToContainer(new Slot(player, (y*9+x) + 9, x * 18 + 6, y * 18 + 124));
			}
		}
		// Create Player Inventory slots 0 - 8
		for(int x = 0; x < 9; x++) {
			this.addSlotToContainer(new Slot(player, x, x * 18 + 6, 182));
		}
	}
	
	
	@Override
	public boolean canInteractWith(EntityPlayer player) {
		// TODO Auto-generated method stub
		return superFurnace.isUseableByPlayer(player);
	}


	@Override
	public void addCraftingToCrafters(ICrafting handler) {
		// TODO Auto-generated method stub
		super.addCraftingToCrafters(handler);
		handler.sendProgressBarUpdate(this, 0, this.superFurnace.furnaceCookTime);
		handler.sendProgressBarUpdate(this, 1, this.superFurnace.furnaceBurnTime);
		handler.sendProgressBarUpdate(this, 2, this.superFurnace.currentItemBurnTime);
	}


	@Override
	public void detectAndSendChanges() {
		// TODO Auto-generated method stub
		super.detectAndSendChanges();
		
		
	}
	
	
}
