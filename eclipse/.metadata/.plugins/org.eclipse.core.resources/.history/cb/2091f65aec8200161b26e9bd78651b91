package com.derf.btawc.items.tools;

import com.derf.btawc.Loader;
import com.derf.btawc.util.MobDropUtils;
import com.google.common.collect.Multimap;

import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.attributes.AttributeModifier;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemSword;
import net.minecraft.util.DamageSource;
import net.minecraftforge.common.ForgeHooks;

public class ItemSwordOfGreed extends ItemSword {

	private int count;
	private float damage;
	
	public ItemSwordOfGreed(String name, int damage, int count, int max) {
		super(ToolMaterial.EMERALD);
		this.damage = damage;
		this.count = count;
		this.setMaxDamage(max);
		this.setUnlocalizedName(name);
		this.setTextureName(Loader.MODID + ":" + name);
	}
	
	@Override
    public float func_150931_i()
    {
        return damage;
    }
	
	@Override
	public boolean onLeftClickEntity(ItemStack stack, EntityPlayer player, Entity entity) {
		
		if(!player.worldObj.isRemote) {
			
			if(entity.isEntityAlive()) {
				/*
				ItemStack s = MobDropUtils.getDropFromEntity(entity);
				
				if(s != null) {
					for(int i = 0; i < count - 1; i++) {
						EntityItem item = new EntityItem(player.worldObj, entity.posX, entity.posY, entity.posZ, s.copy());
						player.worldObj.spawnEntityInWorld(item);
					}
				}
				*/
			}
		}
		
		return super.onLeftClickEntity(stack, player, entity);
	}
	
	public int getCount() {
		return count;
	}
	
    /**
     * Gets a map of item attribute modifiers, used by ItemSword to increase hit damage.
     */
    public Multimap getItemAttributeModifiers()
    {
        Multimap multimap = super.getItemAttributeModifiers();
        multimap.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(field_111210_e, "Weapon modifier", (double)(this.damage + 4.0f), 0));
        return multimap;
    }
}
